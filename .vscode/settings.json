{
    // 在终端中运行编译命令，否则我们无法与程序通过标准输入交互
    "code-runner.runInTerminal": true,
    // 开启这个后在运行编译命令之前会自动 cd 至文件所在目录
    "code-runner.fileDirectoryAsCwd": true,
    // 因为上面那个选项会自动 cd，所以我删除了默认编译命令中的 cd 语句
    // 同时我将编译结果的输出目录修改为了同目录下的 build 文件夹
    // 不然源码文件和编译结果混杂在一个目录中非常杂乱（尤其是刷题时）
    // 这里只保留了 C 和 C++ 的编译命令，有需要其他语言的请自行添加
    "code-runner.executorMap": {
        "c": "gcc $fileName -o build/$fileNameWithoutExt.exe && .\\build\\$fileNameWithoutExt.exe",
        "cpp": "g++ $fileName -o build/$fileNameWithoutExt.exe -Wall -O2 -static-libgcc -std=c++17 -fexec-charset=GB18030 -finput-charset=UTF-8 && .\\build\\$fileNameWithoutExt.exe",
    },
    // 运行代码后切换焦点至终端，方便直接输入测试数据
    "code-runner.preserveFocus": false,
    // 在运行代码之前保存文件
    "code-runner.saveFileBeforeRun": true,
    "python.pythonPath": "C:\\ProgramData\\Anaconda3\\python.exe",
    "files.associations": {
        "iostream": "cpp",
        "cstdio": "cpp",
        "ostream": "cpp",
        "functional": "cpp",
        "typeinfo": "cpp",
        "atomic": "cpp",
        "*.tcc": "cpp",
        "deque": "cpp",
        "string": "cpp",
        "unordered_map": "cpp",
        "vector": "cpp",
        "iterator": "cpp",
        "memory_resource": "cpp",
        "optional": "cpp",
        "string_view": "cpp",
        "fstream": "cpp",
        "istream": "cpp",
        "sstream": "cpp",
        "streambuf": "cpp",
        "system_error": "cpp",
        "tuple": "cpp",
        "new": "cpp",
        "array": "cpp",
        "type_traits": "cpp",
        "utility": "cpp",
        "cstring": "cpp"
    },
    "C_Cpp.clang_format_fallbackStyle": "{ BasedOnStyle: LLVM, IndentWidth: 4,TabWidth: 4,AllowShortBlocksOnASingleLine: true,AllowShortIfStatementsOnASingleLine: true,AllowShortLoopsOnASingleLine: true,MaxEmptyLinesToKeep: 10}",
    "terminal.integrated.cursorBlinking": true,
    
}